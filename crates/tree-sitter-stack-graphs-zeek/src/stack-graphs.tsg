;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Stack graphs definition for Zeek
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Global Variables
;; ^^^^^^^^^^^^^^^^

global MODULE = "GLOBAL"
global FILE_PATH
global ROOT_NODE
global JUMP_TO_SCOPE_NODE

;; Attribute Shorthands
;; ^^^^^^^^^^^^^^^^^^^^

attribute node_definition = node        => type = "pop_symbol", node_symbol = node, is_definition
attribute node_reference = node         => type = "push_symbol", node_symbol = node, is_reference
attribute pop_node = node               => type = "pop_symbol", node_symbol = node
attribute pop_scoped_node = node        => type = "pop_scoped_symbol", node_symbol = node
attribute pop_scoped_symbol = symbol    => type = "pop_scoped_symbol", symbol = symbol
attribute pop_symbol = symbol           => type = "pop_symbol", symbol = symbol
attribute push_node = node              => type = "push_symbol", node_symbol = node
attribute push_scoped_node = node       => type = "push_scoped_symbol", node_symbol = node
attribute push_scoped_symbol = symbol   => type = "push_scoped_symbol", symbol = symbol
attribute push_symbol = symbol          => type = "push_symbol", symbol = symbol
attribute scoped_node_definition = node => type = "pop_scoped_symbol", node_symbol = node, is_definition
attribute scoped_node_reference = node  => type = "push_scoped_symbol", node_symbol = node, is_reference
attribute symbol_definition = symbol    => type = "pop_symbol", symbol = symbol, is_definition
attribute symbol_reference = symbol     => type = "push_symbol", symbol = symbol, is_reference

attribute node_symbol = node            => symbol = (source-text node), source_node = node

;; Stack Graph Rules
;; ^^^^^^^^^^^^^^^^^

(module_decl)@mod {
   node @mod.lexical_scope
   node @mod.module_defs
}

((module_decl)@mod [(var_decl) (expr)]@stmt) {
   edge @stmt.lexical_scope -> @mod.lexical_scope
   edge @mod.lexical_scope -> @stmt.lexical_defs
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[
 (var_decl)
 (expr)
]@stmt {
   node @stmt.lexical_scope
   node @stmt.lexical_defs
}

(var_decl (id)@id)@decl {
   node def
   attr (def) node_definition = @id
   edge @decl.lexical_defs -> def

}

(expr (id)@id)@e {
   node ref
   attr (ref) node_reference = @id
   edge ref -> @e.lexical_scope
}

(_ (initializer (init (expr (id))@inner)))@outer {
   edge @inner.lexical_scope -> @outer.lexical_scope
   edge @outer.lexical_scope -> @inner.lexical_defs
}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[
 (nl)
 (minor_comment)
]@other {
   node @other.lexical_scope
   node @other.lexical_defs
}
